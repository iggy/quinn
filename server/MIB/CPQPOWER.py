# PySNMP SMI module. Autogenerated from smidump -f python CPQPOWER-MIB
# by libsmi2pysnmp-0.0.7-alpha at Wed Nov 18 11:25:39 2009,
# Python version (2, 6, 4, 'final', 0)

# Imported just in case new ASN.1 types would be created
from pyasn1.type import constraint, namedval

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( compaq, ) = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
( MibScalar, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
( NotificationType, ) = mibBuilder.importSymbols("RFC-1215", "NotificationType")
( Counter, Gauge, TimeTicks, ) = mibBuilder.importSymbols("RFC1155-SMI", "Counter", "Gauge", "TimeTicks")
( DisplayString, ifDescr, ifIndex, sysContact, sysDescr, sysLocation, sysName, ) = mibBuilder.importSymbols("RFC1213-MIB", "DisplayString", "ifDescr", "ifIndex", "sysContact", "sysDescr", "sysLocation", "sysName")
( Bits, Integer32, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks")

# Objects

cpqPower = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165))
powerDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1))
trapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1, 1))
trapCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 1), Integer32()).setMaxAccess("readonly")
trapDescription = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
trapDeviceMgmtUrl = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
trapDeviceDetails = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
trapDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 5), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
managementModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1, 2))
deviceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
deviceModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
deviceFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
deviceHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
deviceIdentName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
devicePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
deviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2))
pduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 1))
numOfPdu = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
pduIdentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2))
pduIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1)).setIndexNames((0, "CPQPOWER-MIB", "pduIdentIndex"))
pduIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
pduFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
pduPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
pduStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 8), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ))).setMaxAccess("readonly")
pduControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 9), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,)).subtype(namedValues=namedval.NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readonly")
pduInput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 2))
pduInputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1))
pduInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1)).setIndexNames((0, "CPQPOWER-MIB", "pduInputIndex"))
pduInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
inputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
inputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
pduOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 3))
pduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1))
pduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1)).setIndexNames((0, "CPQPOWER-MIB", "pduOutputIndex"))
pduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
pduOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
pduOutputHeat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
pduOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
pduOutputNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
pduOutputBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2))
pduOutputBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1)).setIndexNames((0, "CPQPOWER-MIB", "pduOutputIndex"), (0, "CPQPOWER-MIB", "breakerIndex"))
breakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
breakerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
breakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
breakerPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
breakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,5,4,2,)).subtype(namedValues=namedval.NamedValues(("normal", 1), ("overloadWarning", 2), ("overloadCritical", 3), ("voltageRangeWarning", 4), ("voltageRangeCritical", 5), ))).setMaxAccess("readonly")
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 1))
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 1), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 2), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
upsIdentSoftwareVersions = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 3), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
upsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 2))
upsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-2147483648L, 2147483647L))).setMaxAccess("readonly")
upsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
upsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(5,1,2,4,3,)).subtype(namedValues=namedval.NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5), ))).setMaxAccess("readonly")
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 3))
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 2), Counter()).setMaxAccess("readonly")
upsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4))
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1)).setIndexNames((0, "CPQPOWER-MIB", "upsInputPhase"))
upsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,7,2,1,6,8,5,4,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8), ))).setMaxAccess("readonly")
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 4))
upsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4))
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1)).setIndexNames((0, "CPQPOWER-MIB", "upsOutputPhase"))
upsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 5), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,5,6,2,8,7,1,10,4,9,)).subtype(namedValues=namedval.NamedValues(("other", 1), ("highEfficiencyMode", 10), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ))).setMaxAccess("readonly")
upsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 5))
upsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
upsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3))
upsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1)).setIndexNames((0, "CPQPOWER-MIB", "upsBypassPhase"))
upsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
upsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 6))
upsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
upsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
upsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
upsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
upsEnvRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
upsEnvRemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
upsEnvNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
upsContactsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8))
upsContactsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1)).setIndexNames((0, "CPQPOWER-MIB", "upsContactIndex"))
upsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
upsContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,3,4,)).subtype(namedValues=namedval.NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("anyChange", 3), ("notUsed", 4), ))).setMaxAccess("readwrite")
upsContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 3), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(4,3,1,2,)).subtype(namedValues=namedval.NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4), ))).setMaxAccess("readonly")
upsContactDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 4), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
upsEnvRemoteTempLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 9), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
upsEnvRemoteTempUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 10), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
upsEnvRemoteHumidityLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 11), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
upsEnvRemoteHumidityUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 12), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 7))
upsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 1), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,)).subtype(namedValues=namedval.NamedValues(("startTest", 1), ))).setMaxAccess("readwrite")
upsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(7,3,6,2,1,4,5,)).subtype(namedValues=namedval.NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7), ))).setMaxAccess("readonly")
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 8))
upsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 9))
upsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 5), DisplayString().subtype(subtypeSpec=constraint.ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
upsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readonly")
upsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 10))
upsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
upsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2))
upsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1)).setIndexNames((0, "CPQPOWER-MIB", "upsRecepIndex"))
upsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
upsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 2), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(1,2,5,4,3,)).subtype(namedValues=namedval.NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5), ))).setMaxAccess("readonly")
upsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 2147483647L))).setMaxAccess("readwrite")
upsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 2147483647L))).setMaxAccess("readwrite")
upsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
upsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
upsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 2147483647L))).setMaxAccess("readwrite")
upsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 11))
upsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 1), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
upsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 2), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
upsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 3), Integer32().subtype(subtypeSpec=constraint.ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
upsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 4), Integer().subtype(subtypeSpec=constraint.SingleValueConstraint(3,1,4,2,)).subtype(namedValues=namedval.NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4), ))).setMaxAccess("readwrite")

# Augmentions

# Notifications

trapCritical = NotificationType((1, 3, 6, 1, 4, 1, 232, 165, 0, 1)).setObjects(("RFC1213-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), )
trapWarning = NotificationType((1, 3, 6, 1, 4, 1, 232, 165, 0, 2)).setObjects(("RFC1213-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), )
deviceTrapInitialization = NotificationType((1, 3, 6, 1, 4, 1, 232, 165, 0, 6)).setObjects(("RFC1213-MIB", "sysName"), ("CPQPOWER-MIB", "deviceIdentName"), )
trapInformation = NotificationType((1, 3, 6, 1, 4, 1, 232, 165, 0, 3)).setObjects(("RFC1213-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), )
trapCleared = NotificationType((1, 3, 6, 1, 4, 1, 232, 165, 0, 4)).setObjects(("RFC1213-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), )
trapTest = NotificationType((1, 3, 6, 1, 4, 1, 232, 165, 0, 5)).setObjects(("RFC1213-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), )

# Exports

# Objects
mibBuilder.exportSymbols("CPQPOWER-MIB", cpqPower=cpqPower, powerDevice=powerDevice, trapInfo=trapInfo, trapCode=trapCode, trapDescription=trapDescription, trapDeviceMgmtUrl=trapDeviceMgmtUrl, trapDeviceDetails=trapDeviceDetails, trapDeviceName=trapDeviceName, managementModuleIdent=managementModuleIdent, deviceManufacturer=deviceManufacturer, deviceModel=deviceModel, deviceFirmwareVersion=deviceFirmwareVersion, deviceHardwareVersion=deviceHardwareVersion, deviceIdentName=deviceIdentName, devicePartNumber=devicePartNumber, deviceSerialNumber=deviceSerialNumber, deviceMACAddress=deviceMACAddress, pdu=pdu, pduIdent=pduIdent, numOfPdu=numOfPdu, pduIdentTable=pduIdentTable, pduIdentEntry=pduIdentEntry, pduIdentIndex=pduIdentIndex, pduName=pduName, pduModel=pduModel, pduManufacturer=pduManufacturer, pduFirmwareVersion=pduFirmwareVersion, pduPartNumber=pduPartNumber, pduSerialNumber=pduSerialNumber, pduStatus=pduStatus, pduControllable=pduControllable, pduInput=pduInput, pduInputTable=pduInputTable, pduInputEntry=pduInputEntry, pduInputIndex=pduInputIndex, inputVoltage=inputVoltage, inputCurrent=inputCurrent, pduOutput=pduOutput, pduOutputTable=pduOutputTable, pduOutputEntry=pduOutputEntry, pduOutputIndex=pduOutputIndex, pduOutputLoad=pduOutputLoad, pduOutputHeat=pduOutputHeat, pduOutputPower=pduOutputPower, pduOutputNumBreakers=pduOutputNumBreakers, pduOutputBreakerTable=pduOutputBreakerTable, pduOutputBreakerEntry=pduOutputBreakerEntry, breakerIndex=breakerIndex, breakerVoltage=breakerVoltage, breakerCurrent=breakerCurrent, breakerPercentLoad=breakerPercentLoad, breakerStatus=breakerStatus, ups=ups, upsIdent=upsIdent, upsIdentManufacturer=upsIdentManufacturer, upsIdentModel=upsIdentModel, upsIdentSoftwareVersions=upsIdentSoftwareVersions, upsIdentOemCode=upsIdentOemCode, upsBattery=upsBattery, upsBatTimeRemaining=upsBatTimeRemaining, upsBatVoltage=upsBatVoltage, upsBatCurrent=upsBatCurrent, upsBatCapacity=upsBatCapacity, upsBatteryAbmStatus=upsBatteryAbmStatus, upsInput=upsInput, upsInputFrequency=upsInputFrequency, upsInputLineBads=upsInputLineBads, upsInputNumPhases=upsInputNumPhases, upsInputTable=upsInputTable, upsInputEntry=upsInputEntry, upsInputPhase=upsInputPhase, upsInputVoltage=upsInputVoltage, upsInputCurrent=upsInputCurrent, upsInputWatts=upsInputWatts, upsInputSource=upsInputSource, upsOutput=upsOutput, upsOutputLoad=upsOutputLoad, upsOutputFrequency=upsOutputFrequency, upsOutputNumPhases=upsOutputNumPhases, upsOutputTable=upsOutputTable, upsOutputEntry=upsOutputEntry, upsOutputPhase=upsOutputPhase, upsOutputVoltage=upsOutputVoltage, upsOutputCurrent=upsOutputCurrent, upsOutputWatts=upsOutputWatts, upsOutputSource=upsOutputSource, upsBypass=upsBypass, upsBypassFrequency=upsBypassFrequency, upsBypassNumPhases=upsBypassNumPhases, upsBypassTable=upsBypassTable, upsBypassEntry=upsBypassEntry, upsBypassPhase=upsBypassPhase, upsBypassVoltage=upsBypassVoltage, upsEnvironment=upsEnvironment, upsEnvAmbientTemp=upsEnvAmbientTemp, upsEnvAmbientLowerLimit=upsEnvAmbientLowerLimit, upsEnvAmbientUpperLimit=upsEnvAmbientUpperLimit, upsEnvAmbientHumidity=upsEnvAmbientHumidity, upsEnvRemoteTemp=upsEnvRemoteTemp, upsEnvRemoteHumidity=upsEnvRemoteHumidity, upsEnvNumContacts=upsEnvNumContacts, upsContactsTable=upsContactsTable, upsContactsTableEntry=upsContactsTableEntry, upsContactIndex=upsContactIndex, upsContactType=upsContactType, upsContactState=upsContactState, upsContactDescr=upsContactDescr, upsEnvRemoteTempLowerLimit=upsEnvRemoteTempLowerLimit, upsEnvRemoteTempUpperLimit=upsEnvRemoteTempUpperLimit, upsEnvRemoteHumidityLowerLimit=upsEnvRemoteHumidityLowerLimit, upsEnvRemoteHumidityUpperLimit=upsEnvRemoteHumidityUpperLimit, upsTest=upsTest, upsTestBattery=upsTestBattery, upsTestBatteryStatus=upsTestBatteryStatus, upsControl=upsControl, upsControlOutputOffDelay=upsControlOutputOffDelay, upsControlOutputOnDelay=upsControlOutputOnDelay, upsControlOutputOffTrapDelay=upsControlOutputOffTrapDelay, upsControlOutputOnTrapDelay=upsControlOutputOnTrapDelay, upsControlToBypassDelay=upsControlToBypassDelay, upsLoadShedSecsWithRestart=upsLoadShedSecsWithRestart, upsConfig=upsConfig, upsConfigOutputVoltage=upsConfigOutputVoltage, upsConfigInputVoltage=upsConfigInputVoltage, upsConfigOutputWatts=upsConfigOutputWatts, upsConfigOutputFreq=upsConfigOutputFreq)
mibBuilder.exportSymbols("CPQPOWER-MIB", upsConfigDateAndTime=upsConfigDateAndTime, upsConfigLowOutputVoltageLimit=upsConfigLowOutputVoltageLimit, upsConfigHighOutputVoltageLimit=upsConfigHighOutputVoltageLimit, upsRecep=upsRecep, upsNumReceptacles=upsNumReceptacles, upsRecepTable=upsRecepTable, upsRecepEntry=upsRecepEntry, upsRecepIndex=upsRecepIndex, upsRecepStatus=upsRecepStatus, upsRecepOffDelaySecs=upsRecepOffDelaySecs, upsRecepOnDelaySecs=upsRecepOnDelaySecs, upsRecepAutoOffDelay=upsRecepAutoOffDelay, upsRecepAutoOnDelay=upsRecepAutoOnDelay, upsRecepShedSecsWithRestart=upsRecepShedSecsWithRestart, upsTopology=upsTopology, upsTopologyType=upsTopologyType, upsTopoMachineCode=upsTopoMachineCode, upsTopoUnitNumber=upsTopoUnitNumber, upsTopoPowerStrategy=upsTopoPowerStrategy)

# Notifications
mibBuilder.exportSymbols("CPQPOWER-MIB", trapCritical=trapCritical, trapWarning=trapWarning, deviceTrapInitialization=deviceTrapInitialization, trapInformation=trapInformation, trapCleared=trapCleared, trapTest=trapTest)

